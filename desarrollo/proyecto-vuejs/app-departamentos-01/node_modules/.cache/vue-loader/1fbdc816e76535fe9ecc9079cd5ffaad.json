{"remainingRequest":"/home/miakhalifa/Escritorio/PlataformasWeb2bim/taller14-comunistas/desarrollo/proyecto-vuejs/app-departamentos-01/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/miakhalifa/Escritorio/PlataformasWeb2bim/taller14-comunistas/desarrollo/proyecto-vuejs/app-departamentos-01/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/miakhalifa/Escritorio/PlataformasWeb2bim/taller14-comunistas/desarrollo/proyecto-vuejs/app-departamentos-01/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/miakhalifa/Escritorio/PlataformasWeb2bim/taller14-comunistas/desarrollo/proyecto-vuejs/app-departamentos-01/src/components/CreateDepartamento.vue?vue&type=template&id=6d040d60&","dependencies":[{"path":"/home/miakhalifa/Escritorio/PlataformasWeb2bim/taller14-comunistas/desarrollo/proyecto-vuejs/app-departamentos-01/src/components/CreateDepartamento.vue","mtime":1626500361331},{"path":"/home/miakhalifa/Escritorio/PlataformasWeb2bim/taller14-comunistas/desarrollo/proyecto-vuejs/app-departamentos-01/node_modules/cache-loader/dist/cjs.js","mtime":1626367344976},{"path":"/home/miakhalifa/Escritorio/PlataformasWeb2bim/taller14-comunistas/desarrollo/proyecto-vuejs/app-departamentos-01/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1626367355757},{"path":"/home/miakhalifa/Escritorio/PlataformasWeb2bim/taller14-comunistas/desarrollo/proyecto-vuejs/app-departamentos-01/node_modules/cache-loader/dist/cjs.js","mtime":1626367344976},{"path":"/home/miakhalifa/Escritorio/PlataformasWeb2bim/taller14-comunistas/desarrollo/proyecto-vuejs/app-departamentos-01/node_modules/vue-loader/lib/index.js","mtime":1626367355757}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}